// Created using https://bcherny.github.io/json-schema-to-typescript-browser/

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Dictionary that follows https://js.cytoscape.org/
 */
interface CytoscapeSchema {
  /**
   * An array of elements specified as plain objects. For convenience, this option can alternatively be specified as a promise that resolves to the elements JSON.
   */
  elements?: {
    /**
     * nodes' for a node, 'edges' for an edge. NB the group field can be automatically inferred for you but specifying it gives you nice debug messages if you mis-init elements
     */
    group?: "nodes" | "edges";
    /**
     * element data
     */
    data?: {
      /**
       * mandatory (string) id for each element, assigned automatically on undefined
       */
      id: string;
      /**
       * indicates the compound node parent id; not defined => no parent
       */
      parent?: string;
      /**
       * the source node id (edge comes from this node)
       */
      source?: string;
      /**
       * the target node id (edge goes to this node)
       */
      target?: string;
      [k: string]: unknown;
    };
    /**
     * the model position of the node
     */
    position?: {
      x?: number;
      y?: number;
      [k: string]: unknown;
    };
    /**
     * can alternatively specify position in rendered on-screen pixels
     */
    renderedPosition?: {
      x?: number;
      y?: number;
      [k: string]: unknown;
    };
    selected?: boolean;
    /**
     * whether the selection state is mutable
     */
    selectable?: boolean;
    /**
     * when locked a node's position is immutable
     */
    locked?: boolean;
    /**
     * whether the node can be grabbed and moved by the user
     */
    grabbable?: boolean;
    /**
     * whether dragging the node causes panning instead of grabbing
     */
    pannable?: boolean;
    /**
     * an array of class names that the element has
     */
    classes?: string[];
    [k: string]: unknown;
  }[];
  /**
   * Placement of the nodes see https://js.cytoscape.org/#layouts
   */
  layout?: {
    /**
     * Type of layout
     */
    name:
      | "null"
      | "random"
      | "preset"
      | "grid"
      | "circle"
      | "concentric"
      | "breadthfirst"
      | "cose";
    /**
     * whether to fit to viewport
     */
    fit?: boolean;
    /**
     * fit padding
     */
    padding?: number;
    /**
     * constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
     */
    boundingBox?: {
      [k: string]: unknown;
    };
    /**
     * whether to transition the node positions
     */
    animate?: boolean;
    /**
     * duration of animation in ms if enabled
     */
    animationDuration?: number;
    /**
     * layout = preset, map of (node id) => (position obj); or function(node){ return somPos; }
     */
    positions?: {
      [k: string]: unknown;
    };
    /**
     * When layout is grid, circle, concentric, breathfirst. prevents node overlap, may overflow boundingBox if not enough space
     */
    avoidOverlap?: boolean;
    /**
     * When layout is grid. Extra spacing around nodes when avoidOverlap: true
     */
    avoidOverlapPadding?: number;
    /**
     * Excludes the label when calculating node bounding boxes for the layout algorithm
     */
    nodeDimensionsIncludeLabels?: boolean;
    /**
     * When layout is grid, circle, breadthfirst. grid, circle: Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up.breathfirst: positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
     */
    spacingFactor?: number;
    /**
     * When layout is grid. uses all available space on false, uses minimal space on true
     */
    condense?: boolean;
    /**
     * When layout is grid. force num of rows in the grid
     */
    rows?: number;
    /**
     * When layout is grid. force num of columns in the grid
     */
    cols?: number;
    /**
     * When layout is circle. the radius of the circle
     */
    radius?: number;
    /**
     * When layout is circle, concentric. where nodes start in radians
     */
    startAngle?: number;
    /**
     * When layout is circle, concentric. how many radians should be between the first and last node (defaults to full circle)
     */
    sweep?: number;
    /**
     * When layout is circle, concentric. whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
     */
    clockwise?: boolean;
    /**
     * When layout is concentric. whether levels have an equal radial distance betwen them, may cause bounding box overflow
     */
    equidistant?: boolean;
    /**
     * When layout is concentric. min spacing between outside of nodes (used for radius adjustment)
     */
    minNodeSpacing?: number;
    /**
     * When layout is breadthfirst. whether the tree is directed downwards (or edges can point in any direction if false)
     */
    directed?: boolean;
    /**
     * When layout is breadthfirst. put depths in concentric circles if true, put depths top down if false
     */
    circle?: boolean;
    /**
     * When layout is breadthfirst. whether to create an even grid into which the DAG is placed (circle:false only)
     */
    grid?: boolean;
    /**
     * When layout is breadthfirst. Format of selector, the roots of the trees
     */
    roots?: string;
    /**
     * When layout is breadthfirst. whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
     */
    maximal?: boolean;
    /**
     * When layout is cose. Randomize the initial positions of the nodes (true) or use existing positions (false)
     */
    randomize?: boolean;
    /**
     * When layout is cose. Extra spacing between components in non-compound graphs
     */
    componentSpacing?: number;
    /**
     * When layout is cose. Node repulsion (overlapping) multiplier
     */
    nodeOverlap?: number;
    /**
     * When layout is cose. Nesting factor (multiplier) to compute ideal edge length for nested edges
     */
    nestingFactor?: number;
    /**
     * When layout is cose. Gravity force (constant)
     */
    gravity?: number;
    /**
     * When layout is cose. Maximum number of iterations to perform
     */
    numIter?: number;
    /**
     * When layout is cose. Initial temperature (maximum node displacement)
     */
    initialTemp?: number;
    /**
     * When layout is cose. Cooling factor (how the temperature is reduced between consecutive iterations)
     */
    coolingFactor?: number;
    /**
     * When layout is cose. Lower temperature threshold (below this point the layout will end)
     */
    minTemp?: number;
    [k: string]: unknown;
  };
  /**
   * Style applied to a group, e.g. all nodes, all edges, nodes in a certain class or a single node, etc. Each element is CSS-like, See https://js.cytoscape.org/#style
   */
  style?: {
    /**
     * Where to apply the style element, common inputs are *node* or *edge*, Also takes in css selector, e.g. *.foo* to apply to all edges and nodes of class *foo*, #foo (or [id="foo"]) for node or edge of with id foo. See https://js.cytoscape.org/#selectors/notes-amp-caveats
     */
    selector: string;
    /**
     * Specify the styles
     */
    style: {
      /**
       * The width of the node’s body or the width of an edge’s line.
       */
      width?: number;
      /**
       * The height of the node’s body
       */
      height?: number;
      /**
       * The shape of the node’s body. Note that each shape fits within the specified width and height, and so you may have to adjust width and height if you desire an equilateral shape (i.e. width !== height for several equilateral shapes)
       */
      shape?:
        | "ellipse"
        | "triangle"
        | "round-triangle"
        | "rectangle"
        | "round-rectangle"
        | "bottom-round-rectangle"
        | "cut-rectangle"
        | "barrel"
        | "rhomboid"
        | "diamond"
        | "round-diamond"
        | "pentagon"
        | "round-pentagon"
        | "hexagon"
        | "round-hexagon"
        | "concave-hexagon"
        | "heptagon"
        | "round-heptagon"
        | "octagon"
        | "round-octagon"
        | "star"
        | "tag"
        | "round-tag"
        | "vee";
      /**
       * The colour of the node’s body. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "background-color"?: string;
      /**
       * Blackens the node’s body for values from 0 to 1; whitens the node’s body for values from 0 to -1.
       */
      "background-blacken"?: number;
      /**
       * The opacity level of the node’s background colour
       */
      "background-opacity"?: number;
      /**
       * The size of the node’s border.
       */
      "border-width"?: number;
      /**
       * The style of the node’s border
       */
      "border-style"?: "solid" | "dotted" | "dashed" | "double";
      /**
       * The colour of the node’s border. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "border-color"?: string;
      /**
       * The opacity of the node’s border
       */
      "border-opacity"?: number;
      /**
       * The amount of padding around all sides of the node.
       */
      padding?: number;
      /**
       * The curving method used to separate two or more edges between two nodes; may be haystack (very fast, bundled straight edges for which loops and compounds are unsupported), straight (straight edges with all arrows supported), bezier (bundled curved edges), unbundled-bezier (curved edges for use with manual control points), segments (a series of straight lines), taxi (right-angled lines, hierarchically bundled). Note that haystack edges work best with ellipse, rectangle, or similar nodes. Smaller node shapes, like triangle, will not be as aesthetically pleasing. Also note that edge endpoint arrows are unsupported for haystack edges.
       */
      "curve-style"?:
        | "straight"
        | "haystack"
        | "bezier"
        | "unbundled-bezier"
        | "segments"
        | "taxi";
      /**
       * The colour of the edge’s line. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "line-color"?: string;
      /**
       * The style of the edge’s line.
       */
      "line-style"?: "solid" | "dotted" | "dashed";
      /**
       * The cap style of the edge’s line; may be butt (default), round, or square. The cap may or may not be visible, depending on the shape of the node and the relative size of the node and edge. Caps other than butt extend beyond the specified endpoint of the edge.
       */
      "line-cap"?: "butt" | "round" | "square";
      /**
       * The opacity of the edge’s line and arrow. Useful if you wish to have a separate opacity for the edge label versus the edge line. Note that the opacity value of the edge element affects the effective opacity of its line and label subcomponents.
       */
      "line-opacity"?: number;
      /**
       * The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "target-arrow-color"?: string;
      /**
       * The shape of the edge’s source arrow
       */
      "target-arrow-shape"?:
        | "triangle"
        | "triangle-tee"
        | "circle-triangle"
        | "triangle-cross"
        | "triangle-backcurve"
        | "vee"
        | "tee"
        | "square"
        | "circle"
        | "diamond"
        | "chevron"
        | "none";
      /**
       * The fill state of the edge’s source arrow
       */
      "target-arrow-fill"?: "filled" | "hollow";
      /**
       * The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "mid-target-arrow-color"?: string;
      /**
       * The shape of the edge’s source arrow
       */
      "mid-target-arrow-shape"?:
        | "triangle"
        | "triangle-tee"
        | "circle-triangle"
        | "triangle-cross"
        | "triangle-backcurve"
        | "vee"
        | "tee"
        | "square"
        | "circle"
        | "diamond"
        | "chevron"
        | "none";
      /**
       * The fill state of the edge’s source arrow
       */
      "mid-target-arrow-fill"?: "filled" | "hollow";
      /**
       * Scaling for the arrow size.
       */
      "arrow-scale"?: number;
      /**
       * The opacity of the element. See https://js.cytoscape.org/#style/visibility
       */
      opacity?: number;
      /**
       * An integer value that affects the relative draw order of elements. In general, an element with a higher z-index will be drawn on top of an element with a lower z-index. Note that edges are under nodes despite z-index.
       */
      "z-index"?: number;
      /**
       * The text to display for an element’s label. Can give a path, e.g. data(id) will label with the elements id
       */
      label?: string;
      /**
       * The text to display for an edge’s source label. Can give a path, e.g. data(id) will label with the elements id
       */
      "source-label"?: string;
      /**
       * The text to display for an edge’s target label. Can give a path, e.g. data(id) will label with the elements id
       */
      "target-label"?: string;
      /**
       * The color of the element's label. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      color?: string;
      /**
       * The opacity of the label text, including its outline.
       */
      "text-opacity"?: number;
      /**
       * A comma-separated list of font names to use on the label text.
       */
      "font-family"?: string;
      /**
       * The size of the label text.
       */
      "font-size"?: string;
      /**
       * A CSS font style to be applied to the label text.
       */
      "font-style"?: string;
      /**
       * A CSS font weight to be applied to the label text.
       */
      "font-weight"?: string;
      /**
       * A transformation to apply to the label text
       */
      "text-transform"?: "none" | "uppercase" | "lowercase";
      /**
       * The horizontal alignment of a node’s label
       */
      "text-halign"?: "left" | "center" | "right";
      /**
       * The vertical alignment of a node’s label
       */
      "text-valign"?: "top" | "center" | "bottom";
      /**
       * Whether to use the ghost effect, a semitransparent duplicate of the element drawn at an offset.
       */
      ghost?: "yes" | "no";
      /**
       * The colour of the indicator shown when the background is grabbed by the user. Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "active-bg-color"?: string;
      /**
       *  The opacity of the active background indicator. Selector needs to be *core*.
       */
      "active-bg-opacity"?: string;
      /**
       *  The opacity of the active background indicator. Selector needs to be *core*.
       */
      "active-bg-size"?: string;
      /**
       * The background colour of the selection box used for drag selection. Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "selection-box-color"?: string;
      /**
       * The size of the border on the selection box. Selector needs to be *core*
       */
      "selection-box-border-width"?: number;
      /**
       * The opacity of the selection box.  Selector needs to be *core*
       */
      "selection-box-opacity"?: number;
      /**
       * The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.  Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
       */
      "outside-texture-bg-color"?: string;
      /**
       * The opacity of the area outside the viewport texture. Selector needs to be *core*
       */
      "outside-texture-bg-opacity"?: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  }[];
  /**
   * The initial zoom level of the graph. Make sure to disable viewport manipulation options, such as fit, in your layout so that it is not overridden when the layout is applied. You can set options.minZoom and options.maxZoom to set restrictions on the zoom level
   */
  zoom?: number & string;
  /**
   * The initial panning position of the graph. Make sure to disable viewport manipulation options, such as fit, in your layout so that it is not overridden when the layout is applied.
   */
  pan?: {
    x?: number;
    y?: number;
  };
  /**
   * A minimum bound on the zoom level of the graph. The viewport cannot be scaled smaller than this zoom level.
   */
  minZoom?: number;
  /**
   * A maximum bound on the zoom level of the graph. The viewport cannot be scaled larger than this zoom level.
   */
  maxZoom?: number;
  /**
   * Whether zooming the graph is enabled, both by user events and programmatically.
   */
  zoomingEnabled?: boolean;
  /**
   * Whether user events (e.g. mouse wheel, pinch-to-zoom) are allowed to zoom the graph. Programmatic changes to zoom are unaffected by this option.
   */
  userZoomingEnabled?: boolean;
  /**
   * Whether panning the graph is enabled, both by user events and programmatically.
   */
  panningEnabled?: boolean;
  /**
   * Whether user events (e.g. dragging the graph background) are allowed to pan the graph. Programmatic changes to pan are unaffected by this option.
   */
  userPanningEnabled?: boolean;
  /**
   * Whether box selection (i.e. drag a box overlay around, and release it to select) is enabled. If enabled while panning is also enabled, the user must use a modifier key (shift, alt, control, or command) to use box selection.
   */
  boxSelectionEnabled?: boolean;
  /**
   * A string indicating the selection behaviour from user input. For 'additive', a new selection made by the user adds to the set of currently selected elements. For 'single', a new selection made by the user becomes the entire set of currently selected elements (i.e. the previous elements are unselected).
   */
  selectionType?: "single" | "additive";
  /**
   * A non-negative integer that indicates the maximum allowable distance that a user may move during a tap gesture on touch devices. This makes tapping easier for users. These values have sane defaults, so it is not advised to change these options unless you have very good reason for doing so. Large values will almost certainly have undesirable consequences.
   */
  touchTapThreshold?: number;
  /**
   * A non-negative integer that indicates the maximum allowable distance that a user may move during a tap gesture on desktop devices. This makes tapping easier for users. These values have sane defaults, so it is not advised to change these options unless you have very good reason for doing so. Large values will almost certainly have undesirable consequences.
   */
  desktopTapThreshold?: number;
  /**
   * Whether nodes should be ungrabified (not grabbable by user) by default (if true, overrides individual node state)
   */
  autoungrabify?: boolean;
  /**
   * Whether nodes should be locked (not draggable at all) by default (if true, overrides individual node state).
   */
  autolock?: boolean;
  /**
   * Whether nodes should be unselectified (immutable selection state) by default (if true, overrides individual element state).
   */
  autounselectify?: boolean;
  /**
   * A convenience option that initialises the instance to run headlessly. You do not need to set this in environments that are implicitly headless (e.g. Node.js). However, it is handy to set headless: true if you want a headless instance in a browser.
   */
  headless?: boolean;
  /**
   * A boolean that indicates whether styling should be used. For headless (i.e. outside the browser) environments, display is not necessary and so neither is styling necessary — thereby speeding up your code. You can manually enable styling in headless environments if you require it for a special case. Note that it does not make sense to disable style if you plan on rendering the graph. Also note that cy.destroy() must be called to clean up a style-enabled, headless instance.
   */
  styleEnabled?: boolean;
  /**
   * Changes the scroll wheel sensitivity when zooming. This is a multiplicative modifier. So, a value between 0 and 1 reduces the sensitivity (zooms slower), and a value greater than 1 increases the sensitivity (zooms faster). This option is set to a sane value that works well for mainstream mice (Apple, Logitech, Microsoft) on Linux, Mac, and Windows. If the default value seems too fast or too slow on your particular system, you may have non-default mouse settings in your OS or a niche mouse. You should not change this value unless your app is meant to work only on specific hardware. Otherwise, you risk making zooming too slow or too fast for most users.
   */
  wheelSensitivity?: number;
  [k: string]: unknown;
}

export default CytoscapeSchema;
